networks:
  log_network:
    driver: bridge

services:
  # customer-service - manage users
  customer-service:
    container_name: customer-service
    hostname: customer-service
    build:
      context: ../customer-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8090:8080"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../customer-service/.env
    networks: { default: { aliases: [ "customer-service" ] } }

  # project-service-http - handles user projects via HTTP
  project-service-http:
    container_name: project-service-http
    hostname: project-service-http
    build:
      context: ../project-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../project-service/.env
    environment:
      - PORT=8080
      - PROTO=http
    networks: { default: { aliases: [ "project-service-http" ] } }

  # project-service-grpc - handles user projects via gRPC
  project-service-grpc:
    container_name: project-service-grpc
    hostname: project-service-grpc
    build:
      context: ../project-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8092:50051"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../project-service/.env
    environment:
      - PORT=50051
      - PROTO=grpc
    networks: { default: { aliases: [ "project-service-grpc" ] } }

  # subscription-service-http - store and retrieve subscriptions via HTTP
  subscription-service-http:
    container_name: subscription-service-http
    hostname: subscription-service-http
    build:
      context: ../subscription-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8089:8080"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../subscription-service/.env
    environment:
      - PORT=8080
      - PROTO=http
    networks: { default: { aliases: [ "subscription-service-http" ] } }

  # subscription-service-grpc - store and retrieve subscriptions via gRPC
  subscription-service-grpc:
    container_name: subscription-service-grpc
    hostname: subscription-service-grpc
    build:
      context: ../subscription-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8099:50051"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../subscription-service/.env
    environment:
      - PORT=50051
      - PROTO=grpc
    networks: { default: { aliases: [ "subscription-service-grpc" ] } }

  # checkmail-service-http - check if an email/domain is disposable via HTTP
  checkmail-service-http:
    container_name: checkmail-service-http
    hostname: checkmail-service-http
    build:
      context: ../checkmail-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8083:8080"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../checkmail-service/.env
    environment:
      - PORT=8080
      - PROTO=http
    networks: { default: { aliases: [ "checkmail-service-http" ] } }

  # checkmail-service-grpc - check if an email/domain is disposable via gRPC
  checkmail-service-grpc:
    container_name: checkmail-service-grpc
    hostname: checkmail-service-grpc
    build:
      context: ../checkmail-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8093:50051"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../checkmail-service/.env
    environment:
      - PORT=50051
      - PROTO=grpc
    networks: { default: { aliases: [ "checkmail-service-grpc" ] } }

  # lookup-service-http - determines email domain type via HTTP
  lookup-service-http:
    container_name: lookup-service-http
    hostname: lookup-service-http
    build:
      context: ../lookup-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8084:8080"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../lookup-service/.env
    environment:
      - PORT=8080
      - PROTO=http
    networks: { default: { aliases: [ "lookup-service-http" ] } }

  # lookup-service-grpc - determines email domain type via gRPC
  lookup-service-grpc:
    container_name: lookup-service-grpc
    hostname: lookup-service-grpc
    build:
      context: ../lookup-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8094:50051"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../lookup-service/.env
    environment:
      - PORT=50051
      - PROTO=grpc
    networks: { default: { aliases: [ "lookup-service-grpc" ] } }

  #  stat-service:
  #    hostname: stat-service
  #    container_name: stat-service
  #    build:
  #      context: ../stat-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    ports:
  #      - "8088:80"
  #    volumes:
  #      - "../stat-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #      - "../data/elk/certs/es01:/app/certs"
  #    networks:
  #      - log_network
  #      - default
  #    env_file:
  #      - ../stat-service/.env

  # adapter-service:
  #    hostname: adapter-service
  #    container_name: adapter-service
  #    build:
  #      context: ../adapter-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    depends_on:
  #      - checkmail-service
  #    ports:
  #      - "8087:80"
  #    volumes:
  #      - "../adapter-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #    env_file:
  #      - ../adapter-service/.env

  #  # mail-service - sends emails
  #  mail-service:
  #    container_name: mail-service
  #    hostname: mail-service
  #    build:
  #      context: ../mail-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    depends_on:
  #      - mailhog
  #    ports:
  #      - "8086:80"
  #    volumes:
  #      - "../mail-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #    env_file:
  #      - ../mail-service/.env

  #  # mailhog: a fake smtp server with a web interface
  #  mailhog:
  #    container_name: mailhog
  #    hostname: mailhog
  #    image: 'mailhog/mailhog:latest'
  #    ports:
  #      - "8025:8025"
  #      - "1025:1025"

  firebase-emulator:
    container_name: firebase-emulator
    build:
      context: ./firebase-emulator
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
      - "8080:8080"
      - "8085:8085"
      - "9099:9099"
    restart: unless-stopped

  postgres:
    container_name: postgres
    hostname: postgres
    image: 'postgres:16.6-alpine'
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data/