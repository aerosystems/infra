networks:
  log_network:
    driver: bridge

services:
  # customer-service - manage users
  customer-service:
    container_name: customer-service
    hostname: customer-service
    build:
      context: ../customer-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8090:8080"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../customer-service/.env
    networks: { default: { aliases: [ "customer-service" ] } }

  # project-service-http - handles user projects via HTTP
  project-service-http:
    container_name: project-service-http
    hostname: project-service-http
    build:
      context: ../project-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../project-service/.env
    environment:
      - PORT=8080
      - PROTO=http
    networks: { default: { aliases: [ "project-service-http" ] } }

  # project-service-grpc - handles user projects via gRPC
  project-service-grpc:
    container_name: project-service-grpc
    hostname: project-service-grpc
    build:
      context: ../project-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8092:50051"
    expose:
      - "50051"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../project-service/.env
    environment:
      - PORT=50051
      - PROTO=grpc
    networks: { default: { aliases: [ "project-service-grpc" ] } }

  # subscription-service-http - store and retrieve subscriptions via HTTP
  subscription-service-http:
    container_name: subscription-service-http
    hostname: subscription-service-http
    build:
      context: ../subscription-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8089:8080"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../subscription-service/.env
    environment:
      - PORT=8080
      - PROTO=http
    networks: { default: { aliases: [ "subscription-service-http" ] } }

  # subscription-service-grpc - store and retrieve subscriptions via gRPC
  subscription-service-grpc:
    container_name: subscription-service-grpc
    hostname: subscription-service-grpc
    build:
      context: ../subscription-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8099:50051"
    expose:
      - "50051"
    volumes:
      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
    env_file:
      - ../subscription-service/.env
    environment:
      - PORT=50051
      - PROTO=grpc
    networks: { default: { aliases: [ "subscription-service-grpc" ] } }

  firebase-emulator:
    container_name: firebase-emulator
    build:
      context: ../firebase-emulator
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
      - "8080:8080"
      - "9099:9099"
    restart: unless-stopped

  #  # checkmail-service - handles domain & emails
  #  checkmail-service:
  #    container_name: checkmail-service
  #    hostname: checkmail-service
  #    build:
  #      context: ../checkmail-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    depends_on:
  #      - postgres
  #    ports:
  #      - "8083:8080"
  #    volumes:
  #      - "./secrets/verifire-60d1b-3a7b22c9842d.json:/app/secrets/verifire-60d1b-3a7b22c9842d.json"
  #    env_file:
  #      - ../checkmail-service/.env
  #    networks: { default: { aliases: [ "checkmail-service" ] } }

  #  # postgres: start Postgres, and ensure that data is stored to a mounted volume
  #  postgres:
  #    container_name: postgres
  #    hostname: postgres
  #    image: 'postgres:15.2'
  #    ports:
  #      - "5432:5432"
  #    restart: unless-stopped
  #    environment:
  #      POSTGRES_USER: ${POSTGRES_USER}
  #      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #      POSTGRES_DB: ${POSTGRES_DB}
  #    volumes:
  #      - ../data/postgres/:/var/lib/postgresql/data/

  #  # mailhog: a fake smtp server with a web interface
  #  mailhog:
  #    container_name: mailhog
  #    hostname: mailhog
  #    image: 'mailhog/mailhog:latest'
  #    ports:
  #      - "8025:8025"
  #      - "1025:1025"

  #  stat-service:
  #    hostname: stat-service
  #    container_name: stat-service
  #    build:
  #      context: ../stat-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    ports:
  #      - "8088:80"
  #    volumes:
  #      - "../stat-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #      - "../data/elk/certs/es01:/app/certs"
  #    networks:
  #      - log_network
  #      - default
  #    env_file:
  #      - ../stat-service/.env

  #  # redis: the redis server
  #  redis:
  #    container_name: redis
  #    hostname: redis
  #    image: 'redis:6.2-alpine'
  #    restart: unless-stopped
  #    ports:
  #      - "6379:6379"
  #    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
  #    volumes:
  #      - ../data/redis:/data

  #  # recaptcha-service - checks reCAPTCHA tokens
  #  recaptcha-service:
  #    container_name: recaptcha-service
  #    hostname: recaptcha-service
  #    build:
  #      context: ../recaptcha-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    ports:
  #      - "8085:80"
  #    volumes:
  #      - "../recaptcha-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #    env_file:
  #      - ../recaptcha-service/.env

  # adapter-service:
  #    hostname: adapter-service
  #    container_name: adapter-service
  #    build:
  #      context: ../adapter-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    depends_on:
  #      - checkmail-service
  #    ports:
  #      - "8087:80"
  #    volumes:
  #      - "../adapter-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #    env_file:
  #      - ../adapter-service/.env

  #  # mail-service - sends emails
  #  mail-service:
  #    container_name: mail-service
  #    hostname: mail-service
  #    build:
  #      context: ../mail-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    depends_on:
  #      - mailhog
  #    ports:
  #      - "8086:80"
  #    expose:
  #      - "5001"
  #    volumes:
  #      - "../mail-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #    env_file:
  #      - ../mail-service/.env

  #  # api-gateway - main entry point
  #  api-gateway:
  #    container_name: api-gateway
  #    hostname: api-gateway
  #    image: 'nginx:1.21.3-alpine'
  #    restart: unless-stopped
  #    depends_on:
  #      - auth-service
  #      - project-service
  #      - checkmail-service
  #    environment:
  #      GW_DOMAIN: ${GW_DOMAIN}
  #    ports:
  #      - "443:443"
  #    volumes:
  #      - ../gateway/nginx.conf:/etc/nginx/nginx.conf
  #      - ../gateway/api_backends.conf:/etc/nginx/api_backends.conf
  #      - ../gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
  #      - ../gateway/api_json_errors.conf:/etc/nginx/api_json_errors.conf
  #      - ../gateway/cors.conf:/etc/nginx/cors.conf
  #      - ../gateway/api_conf.d:/etc/nginx/api_conf.d
  #      - ../gateway/conf.d:/etc/nginx/conf.d
  #      - ../gateway/certs:/etc/nginx/certs

  #  # auth-service - handles user auth
  #  auth-service:
  #    container_name: auth-service
  #    hostname: auth-service
  #    build:
  #      context: ../auth-service
  #      dockerfile: Dockerfile
  #    restart: unless-stopped
  #    depends_on:
  #      - postgres
  #      - redis
  #    ports:
  #      - "8081:80"
  #    volumes:
  #      - "../auth-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #    env_file:
  #      - ../auth-service/.env

  #  # lookup-service - determines email domain type
  #  lookup-service:
  #    container_name: lookup-service
  #    hostname: lookup-service
  #    build:
  #      context: ../lookup-service
  #      dockerfile: Dockerfile
  #    #      dockerfile: Dockerfile.debug
  #    restart: unless-stopped
  #    depends_on:
  #      - postgres
  #    ports:
  #      - "8084:80"
  #    #      - "40000:40000"
  #    expose:
  #      - "5001"
  #    volumes:
  #      - "../lookup-service/.env:/app/.env"
  #      - "../data/logs:/app/logs"
  #    env_file:
  #      - ../lookup-service/.env