networks:
  log_network:
    driver: bridge

services:
  # api-gateway - main entry point
  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    image: 'nginx:1.21.3-alpine'
    restart: unless-stopped
    depends_on:
      - auth-service
      - project-service
      - checkmail-service
    environment:
      GW_DOMAIN: ${GW_DOMAIN}
    ports:
      - "443:443"
    volumes:
      - ../gateway/nginx.conf:/etc/nginx/nginx.conf
      - ../gateway/api_backends.conf:/etc/nginx/api_backends.conf
      - ../gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      - ../gateway/api_json_errors.conf:/etc/nginx/api_json_errors.conf
      - ../gateway/cors.conf:/etc/nginx/cors.conf
      - ../gateway/api_conf.d:/etc/nginx/api_conf.d
      - ../gateway/conf.d:/etc/nginx/conf.d
      - ../gateway/certs:/etc/nginx/certs

  # auth-service - handles user auth
  auth-service:
    container_name: auth-service
    hostname: auth-service
    build:
      context: ../auth-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    ports:
      - "8081:80"
    volumes:
      - "../auth-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  # project-service - handles user projects
  project-service:
    container_name: project-service
    hostname: project-service
    build:
      context: ../project-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8082:80"
    expose:
      - "5001"
    volumes:
      - "../project-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  # checkmail-service - handles domain & emails
  checkmail-service:
    container_name: checkmail-service
    hostname: checkmail-service
    build:
      context: ../checkmail-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8083:80"
    volumes:
      - "../checkmail-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  # mail-service - sends emails
  mail-service:
    container_name: mail-service
    hostname: mail-service
    build:
      context: ../mail-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - mailhog
    ports:
      - "8086:80"
    expose:
      - "5001"
    volumes:
      - "../mail-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  # lookup-service - determines email domain type
  lookup-service:
    container_name: lookup-service
    hostname: lookup-service
    build:
      context: ../lookup-service
      dockerfile: Dockerfile
    #      dockerfile: Dockerfile.debug
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8084:80"
    #      - "40000:40000"
    expose:
      - "5001"
    volumes:
      - "../lookup-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  # recaptcha-service - checks reCAPTCHA tokens
  recaptcha-service:
    container_name: recaptcha-service
    hostname: recaptcha-service
    build:
      context: ../recaptcha-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8085:80"
    volumes:
      - "../recaptcha-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  adapter-service:
    hostname: adapter-service
    container_name: adapter-service
    build:
      context: ../adapter-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - checkmail-service
    ports:
      - "8087:80"
    volumes:
      - "../adapter-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  stat-service:
    hostname: stat-service
    container_name: stat-service
    build:
      context: ../
      dockerfile: ./stat-service/Dockerfile
    restart: unless-stopped
    ports:
      - "8088:80"
    volumes:
      - "../data/logs:/app/logs"
      - "../data/elk/certs/es01:/app/certs"
    environment:
      BASIC_AUTH_DOCS_USERNAME: ${BASIC_AUTH_DOCS_USERNAME}
      BASIC_AUTH_DOCS_PASSWORD: ${BASIC_AUTH_DOCS_PASSWORD}
      ACCESS_SECRET: ${ACCESS_SECRET}
      ELASTIC_HOST: ${ELASTIC_HOST}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
      - log_network
      - default

  # subs-service - store and retrieve subscriptions
  subs-service:
    container_name: subs-service
    hostname: subs-service
    build:
      context: ../subs-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8089:80"
    expose:
      - "5001"
    volumes:
      - "../subs-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  # customer-service - manage users
  customer-service:
    container_name: customer-service
    hostname: customer-service
    build:
      context: ../customer-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8090:80"
    expose:
      - "5001"
    volumes:
      - "../customer-service/.env:/app/.env"
      - "../data/logs:/app/logs"

  filebeat:
    hostname: filebeat
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - "./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "../data/elk/certs:/usr/share/filebeat/certs"
      - "../data/logs:/usr/share/filebeat/ingest_data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
      - log_network

  # postgres: start Postgres, and ensure that data is stored to a mounted volume
  postgres:
    container_name: postgres
    hostname: postgres
    image: 'postgres:15.2'
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ../data/postgres/:/var/lib/postgresql/data/

  # redis: the redis server
  redis:
    container_name: redis
    hostname: redis
    image: 'redis:6.2-alpine'
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ../data/redis:/data

  # mailhog: a fake smtp server with a web interface
  mailhog:
    container_name: mailhog
    hostname: mailhog
    image: 'mailhog/mailhog:latest'
    ports:
      - "8025:8025"
      - "1025:1025"