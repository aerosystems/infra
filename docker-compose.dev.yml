networks:
  log_network:
    driver: bridge

services:
  # api-gateway - main entry point
  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    image: 'nginx:1.21.3-alpine'
    restart: unless-stopped
    depends_on:
      - auth-service
      - project-service
      - checkmail-service
    environment:
      GW_DOMAIN: ${GW_DOMAIN}
    ports:
      - "443:443"
    volumes:
      - ../verifire-gateway/nginx.conf:/etc/nginx/nginx.conf
      - ../verifire-gateway/api_backends.conf:/etc/nginx/api_backends.conf
      - ../verifire-gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      - ../verifire-gateway/api_json_errors.conf:/etc/nginx/api_json_errors.conf
      - ../verifire-gateway/api_conf.d:/etc/nginx/api_conf.d
      - ../verifire-gateway/conf.d:/etc/nginx/conf.d
      - ../verifire-gateway/certs:/etc/nginx/certs

  # auth-service - handles user auth
  auth-service:
    container_name: auth-service
    hostname: auth-service
    build:
      context: ../
      dockerfile: ./auth-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    ports:
      - "8081:80"
    environment:
      POSTGRES_DSN: ${AUTH_POSTGRES_DSN}
      REDIS_DSN: ${REDIS_DSN}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ACCESS_SECRET: ${ACCESS_SECRET}
      ACCESS_EXP_MINUTES: ${ACCESS_EXP_MINUTES}
      REFRESH_SECRET: ${REFRESH_SECRET}
      REFRESH_EXP_MINUTES: ${REFRESH_EXP_MINUTES}
      TRUST_ROLES: ${TRUST_ROLES}
      GOOGLEMAIL_DOMAINS: ${GOOGLEMAIL_DOMAINS}
      CODE_EXP_MINUTES: ${CODE_EXP_MINUTES}
      BASIC_AUTH_DOCS_USERNAME: ${BASIC_AUTH_DOCS_USERNAME}
      BASIC_AUTH_DOCS_PASSWORD: ${BASIC_AUTH_DOCS_PASSWORD}
      APP_ENV: ${APP_ENV}
    volumes:
      - "../auth-service/logs:/app/logs"

  auth-filebeat:
    hostname: auth-filebeat
    container_name: auth-filebeat
    depends_on:
      - auth-service
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - "../auth-service/filebeat/certs:/usr/share/filebeat/certs"
      - "../auth-service/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "../auth-service/logs:/usr/share/filebeat/ingest_data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
      - log_network
    
  # project-service - handles user projects
  project-service:
    container_name: project-service
    hostname: project-service
    build:
      context: ../
      dockerfile: ./project-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8082:80"
    expose:
      - "5001"
    environment:
      POSTGRES_DSN: ${PROJECT_POSTGRES_DSN}
      APP_ENV: ${APP_ENV}
      ACCESS_SECRET: ${ACCESS_SECRET}
      BASIC_AUTH_DOCS_USERNAME: ${BASIC_AUTH_DOCS_USERNAME}
      BASIC_AUTH_DOCS_PASSWORD: ${BASIC_AUTH_DOCS_PASSWORD}
    volumes:
      - "../project-service/logs:/app/logs"

  project-filebeat:
    hostname: project-filebeat
    container_name: project-filebeat
    depends_on:
      - project-service
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - "../project-service/filebeat/certs:/usr/share/filebeat/certs"
      - "../project-service/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "../project-service/logs:/usr/share/filebeat/ingest_data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
      - log_network

  # checkmail-service - handles domain & emails
  checkmail-service:
    container_name: checkmail-service
    hostname: checkmail-service
    build:
      context: ../
      dockerfile: ./checkmail-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8083:80"
    environment:
      POSTGRES_DSN: ${CHECKMAIL_POSTGRES_DSN}
      APP_ENV: ${APP_ENV}
      ACCESS_SECRET: ${ACCESS_SECRET}
      TRUST_DOMAIN_TYPES: ${TRUST_DOMAIN_TYPES}
      TRUST_DOMAIN_COVERAGES: ${TRUST_DOMAIN_COVERAGES}
      BASIC_AUTH_DOCS_USERNAME: ${BASIC_AUTH_DOCS_USERNAME}
      BASIC_AUTH_DOCS_PASSWORD: ${BASIC_AUTH_DOCS_PASSWORD}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
    volumes:
      - "../checkmail-service/logs:/app/logs"

  checkmail-filebeat:
    hostname: checkmail-filebeat
    container_name: checkmail-filebeat
    depends_on:
      - checkmail-service
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - "../checkmail-service/filebeat/certs:/usr/share/filebeat/certs"
      - "../checkmail-service/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "../checkmail-service/logs:/usr/share/filebeat/ingest_data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
      - log_network

  # mail-service - sends emails
  mail-service:
    container_name: mail-service
    hostname: mail-service
    build:
      context: ../
      dockerfile: ./mail-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - mailhog
    expose:
      - "5001"
    environment:
      EMAIL_PROVIDER: ${EMAIL_PROVIDER}
      BREVO_API_KEY: ${BREVO_API_KEY}
      MAILHOG_DOMAIN: ${MAILHOG_DOMAIN}
      MAILHOG_HOST: ${MAILHOG_HOST}
      MAILHOG_PORT: ${MAILHOG_PORT}
      MAILHOG_ENCRYPTION: ${MAILHOG_ENCRYPTION}
      MAILHOG_USERNAME: ${MAILHOG_USERNAME}
      MAILHOG_PASSWORD: ${MAILHOG_PASSWORD}
    volumes:
      - "../mail-service/logs:/app/logs"

  mail-filebeat:
    hostname: mail-filebeat
    container_name: mail-filebeat
    depends_on:
      - mail-service
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - "../mail-service/filebeat/certs:/usr/share/filebeat/certs"
      - "../mail-service/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "../mail-service/logs:/usr/share/filebeat/ingest_data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
      - log_network

  # lookup-service - determines email domain type
  lookup-service:
    container_name: lookup-service
    hostname: lookup-service
    build:
      context: ../
      dockerfile: ./lookup-service/Dockerfile.debug
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8084:80"
      - "40000:40000"
    expose:
      - "5001"
    volumes:
      - "../lookup-service/logs:/app/logs"
    environment:
        BASIC_AUTH_DOCS_USERNAME: ${BASIC_AUTH_DOCS_USERNAME}
        BASIC_AUTH_DOCS_PASSWORD: ${BASIC_AUTH_DOCS_PASSWORD}
        POSTGRES_DSN: ${LOOKUP_POSTGRES_DSN}
        APP_ENV: ${APP_ENV}
        ACCESS_SECRET: ${ACCESS_SECRET}
    security_opt:
      - "seccomp:unconfined"
    cap_add:
        - SYS_PTRACE
    command: /dlv --headless --listen=:40000 --api-version=2 exec /server

  lookup-filebeat:
    hostname: lookup-filebeat
    container_name: lookup-filebeat
    depends_on:
      - lookup-service
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - "../lookup-service/filebeat/certs:/usr/share/filebeat/certs"
      - "../lookup-service/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "../lookup-service/logs:/usr/share/filebeat/ingest_data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
      - log_network

  # postgres: start Postgres, and ensure that data is stored to a mounted volume
  postgres:
    container_name: postgres
    hostname: postgres
    image: 'postgres:15.2'
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ../data/postgres/:/var/lib/postgresql/data/

  # redis: the redis server
  redis:
    container_name: redis
    hostname: redis
    image: 'redis:6.2-alpine'
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ../data/redis:/data

  # mailhog: a fake smtp server with a web interface
  mailhog:
    container_name: mailhog
    hostname: mailhog
    image: 'mailhog/mailhog:latest'
    ports:
      - "8025:8025"
      - ${MAILHOG_PORT}:${MAILHOG_PORT}

  # broker-service - main entry point; we call this from the front end
  # broker-service:
  #   container_name: broker-service
  #   build:
  #     context: ../
  #     dockerfile: ./broker-service/broker-service.dockerfile
  #   restart: unless-stopped
  #   ports:
  #     - "8080:80"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     RABBIT_URL: ${RABBIT_URL}

  # listener-service - watches rabbitmq for messages
  # listener-service:
  #   container_name: listener-service
  #   build:
  #     context: ../
  #     dockerfile: ./listener-service/listener-service.dockerfile
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     RABBIT_URL: ${RABBIT_URL}


  # rabbitmq: the rabbitmq server
# rabbitmq:
#   container_name: rabbitmq
#   image: 'rabbitmq:3.9-alpine'
#   ports:
#     - "5672:5672"
#    #  - "15672:15672"
#   deploy:
#     mode: replicated
#     replicas: 1
#  #  environment:
#  #   RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
#  #   RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
#   volumes:
#     - ../data/rabbitmq/:/var/lib/rabbitmq/