services:
  # api-gateway - main entry point
  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    image: 'nginx:1.21.3-alpine'
    restart: unless-stopped
    depends_on:
      - auth-service
      - project-service
      - checkmail-service
    environment:
      GW_DOMAIN: ${GW_DOMAIN}
    ports:
      - "443:443"
    volumes:
      - ../verifire-gateway/nginx.conf:/etc/nginx/nginx.conf
      - ../verifire-gateway/api_backends.conf:/etc/nginx/api_backends.conf
      - ../verifire-gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      - ../verifire-gateway/api_json_errors.conf:/etc/nginx/api_json_errors.conf
      - ../verifire-gateway/api_conf.d:/etc/nginx/api_conf.d
      - ../verifire-gateway/conf.d:/etc/nginx/conf.d
      - ../verifire-gateway/certs:/etc/nginx/certs

  # auth-service - handles user auth
  auth-service:
    container_name: auth-service
    hostname: auth-service
    build:
      context: ../
      dockerfile: ./auth-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    ports:
      - "8081:80"
    environment:
      POSTGRES_DSN: ${AUTH_POSTGRES_DSN}
      REDIS_DSN: ${REDIS_DSN}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ACCESS_SECRET: ${ACCESS_SECRET}
      ACCESS_EXP_MINUTES: ${ACCESS_EXP_MINUTES}
      REFRESH_SECRET: ${REFRESH_SECRET}
      REFRESH_EXP_MINUTES: ${REFRESH_EXP_MINUTES}
      TRUST_ROLES: ${TRUST_ROLES}
      GOOGLEMAIL_DOMAINS: ${GOOGLEMAIL_DOMAINS}
      CODE_EXP_MINUTES: ${CODE_EXP_MINUTES}
      BASIC_AUTH_DOCS_USERNAME: ${BASIC_AUTH_DOCS_USERNAME}
      BASIC_AUTH_DOCS_PASSWORD: ${BASIC_AUTH_DOCS_PASSWORD}
      APP_ENV: ${APP_ENV}
    volumes:
      - "../data/elk/filebeat_ingest_data:/app/logs"

      # project-service - handles user projects
  project-service:
    container_name: project-service
    hostname: project-service
    build:
      context: ../
      dockerfile: ./project-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8082:80"
    expose:
      - "5001"
    environment:
      POSTGRES_DSN: ${PROJECT_POSTGRES_DSN}
      APP_ENV: ${APP_ENV}
      ACCESS_SECRET: ${ACCESS_SECRET}
      BASIC_AUTH_DOCS_USERNAME: ${BASIC_AUTH_DOCS_USERNAME}
      BASIC_AUTH_DOCS_PASSWORD: ${BASIC_AUTH_DOCS_PASSWORD}

  # checkmail-service - handles domain & emails
  checkmail-service:
    container_name: checkmail-service
    hostname: checkmail-service
    build:
      context: ../
      dockerfile: ./checkmail-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8083:80"
    environment:
      POSTGRES_DSN: ${CHECKMAIL_POSTGRES_DSN}
      APP_ENV: ${APP_ENV}
      ACCESS_SECRET: ${ACCESS_SECRET}
      TRUST_DOMAIN_TYPES: ${TRUST_DOMAIN_TYPES}
      TRUST_DOMAIN_COVERAGES: ${TRUST_DOMAIN_COVERAGES}
      BASIC_AUTH_DOCS_USERNAME: ${BASIC_AUTH_DOCS_USERNAME}
      BASIC_AUTH_DOCS_PASSWORD: ${BASIC_AUTH_DOCS_PASSWORD}

  # mail-service - sends emails
  mail-service:
    container_name: mail-service
    hostname: mail-service
    build:
      context: ../
      dockerfile: ./mail-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - mailhog
    expose:
      - "5001"
    environment:
      EMAIL_PROVIDER: ${EMAIL_PROVIDER}
      BREVO_API_KEY: ${BREVO_API_KEY}
      MAILHOG_DOMAIN: ${MAILHOG_DOMAIN}
      MAILHOG_HOST: ${MAILHOG_HOST}
      MAILHOG_PORT: ${MAILHOG_PORT}
      MAILHOG_ENCRYPTION: ${MAILHOG_ENCRYPTION}
      MAILHOG_USERNAME: ${MAILHOG_USERNAME}
      MAILHOG_PASSWORD: ${MAILHOG_PASSWORD}

  # lookup-service - determines email domain type
  lookup-service:
    container_name: lookup-service
    hostname: lookup-service
    build:
      context: ../
      dockerfile: ./lookup-service/Dockerfile
    restart: unless-stopped
    expose:
      - "5001"

  # postgres: start Postgres, and ensure that data is stored to a mounted volume
  postgres:
    container_name: postgres
    hostname: postgres
    image: 'postgres:15.1'
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ../data/postgres/:/var/lib/postgresql/data/

  # redis: the redis server
  redis:
    container_name: redis
    hostname: redis
    image: 'redis:6.2-alpine'
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ../data/redis:/data

  # mailhog: a fake smtp server with a web interface
  mailhog:
    container_name: mailhog
    hostname: mailhog
    image: 'mailhog/mailhog:latest'
    ports:
      - "8025:8025"
      - ${MAILHOG_PORT}:${MAILHOG_PORT}

  # elk: the elasticsearch, logstash, and kibana stack
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ../data/elk/certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - ../data/elk/certs:/usr/share/elasticsearch/config/certs
      - ../data/elk/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - cluster.routing.allocation.disk.watermark.low=30mb
      - cluster.routing.allocation.disk.watermark.high=20mb
      - cluster.routing.allocation.disk.watermark.flood_stage=10mb
      - cluster.info.update.interval=1m
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - ../data/elk/certs:/usr/share/kibana/config/certs
      - ../data/elk/kibana:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

#  metricbeat01:
#    depends_on:
#      es01:
#        condition: service_healthy
#      kibana:
#        condition: service_healthy
#    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
#    user: root
#    volumes:
#      - "../data/elk/certs:/usr/share/metricbeat/certs"
#      - "../data/elk/metricbeat:/usr/share/metricbeat/data"
#      - "./elk/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
#      - "/proc:/hostfs/proc:ro"
#      - "/:/hostfs:ro"
#    environment:
#      - ELASTIC_USER=elastic
#      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#      - ELASTIC_HOSTS=https://es01:9200
#      - KIBANA_HOSTS=http://kibana:5601
#      - LOGSTASH_HOSTS=http://logstash01:9600

  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - "../data/elk/certs:/usr/share/filebeat/certs"
      - "../data/elk/filebeat:/usr/share/filebeat/data"
      - "../data/elk/filebeat_ingest_data:/usr/share/filebeat/ingest_data/"
      - "./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/Users/art_k0st/Library/Containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - "../data/elk/certs:/usr/share/logstash/certs"
      - "../data/elk/logstash:/usr/share/logstash/data"
      - "../data/elk/logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200

  # broker-service - main entry point; we call this from the front end
  # broker-service:
  #   container_name: broker-service
  #   build:
  #     context: ../
  #     dockerfile: ./broker-service/broker-service.dockerfile
  #   restart: unless-stopped
  #   ports:
  #     - "8080:80"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     RABBIT_URL: ${RABBIT_URL}

  # listener-service - watches rabbitmq for messages
  # listener-service:
  #   container_name: listener-service
  #   build:
  #     context: ../
  #     dockerfile: ./listener-service/listener-service.dockerfile
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     RABBIT_URL: ${RABBIT_URL}


  # rabbitmq: the rabbitmq server
# rabbitmq:
#   container_name: rabbitmq
#   image: 'rabbitmq:3.9-alpine'
#   ports:
#     - "5672:5672"
#    #  - "15672:15672"
#   deploy:
#     mode: replicated
#     replicas: 1
#  #  environment:
#  #   RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
#  #   RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
#   volumes:
#     - ../data/rabbitmq/:/var/lib/rabbitmq/